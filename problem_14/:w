#!/usr/bin/env pypy

import fileinput, binascii

__author__ = "Alonso Vidales"
__email__ = "alonso.vidales@tras2.es"
__date__ = "2013-04-29"

class Problem:
    __debug = False

    def resolve(self):
        return ''

    def xor_strings(self, xs, ys):
        return "".join(chr(ord(x) ^ ord(y)) for x, y in zip(xs, ys))

    def __init__(self, inLines):
        """pad = "Rather than XORing the Unicode representations, just convert each character into the number it represents in hex, XOR those, then convert it back to hex. You can still do that one character at a time"

        strCip = []
        strCip.append("The fact that it gives correct result is an artifact of the particular character encoding for digits and letters.")
        strCip.append("The should convert the numbers to BigInteger, XOR them, and convert back to String:")
        strCip.append("Why are you storing hex values as strings? it'd be a much better idea to represent hex numbers as hex integers or longs.")
        strCip.append("The solves the problem. But while xoring 4 XOR 4, the result is 0 which is lost when we store it in integer n3. Any idea how to solve it?")
        strCip.append("I edited my answer, now the printed results will always have 6 charac")
        strCip.append("but as it is stored in integer")

        for strToEncode in strCip:
            print self.xor_strings(strToEncode, pad).encode("hex")

        exit()"""

        """self.__xorMapTable = {}
        for left in xrange(31, 128):
            for right in xrange(31, 128):
                if chr(left ^ right) in self.__xorMapTable:
                    self.__xorMapTable[chr(left ^ right)].add(chr(left))
                    self.__xorMapTable[chr(left ^ right)].add(chr(right))
                else:
                    self.__xorMapTable[chr(left ^ right)] = set([chr(left), chr(right)])

        print self.__xorMapTable
        print len((self.__xorMapTable[chr(ord('T') ^ ord('W'))] & self.__xorMapTable[chr(ord('M') ^ ord('P'))]))
        exit()"""

        lineToDecode = inLines.pop(0).decode("hex")
        possibleChars = []

        for line in inLines:
            decoded = self.xor_strings(lineToDecode, line.decode("hex"))
            print self.xor_strings(lineToDecode[:4], line.decode("hex"))
            print self.xor_strings(self.xor_strings(lineToDecode[:4], line.decode("hex")), " the ")

            """for charPos in range(len(aux)):
                if len(possibleChars) <= charPos:
                    possibleChars.append(self.__xorMapTable[aux[charPos]])
                else:
                    possibleChars[charPos] &= self.__xorMapTable[aux[charPos]]"""

        print possibleChars
        exit()

        if self.__debug:
            print "Line: %s" % (self.__line) 

if __name__ == "__main__":
    lines = [line.replace('\n', '') for line in fileinput.input()]

    print "%s" % (Problem(lines).resolve())
